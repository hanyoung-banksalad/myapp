{{ $service_name := "myapp" }}

{{ $service_grpc_port := "18081" }}
{{ $service_http_port := "18082" }}

{{ $telegraf_tag := "1.11.5" }}

{{ $sidecar_tag := "2379eb47aac58a8cdc6956044935328583fa1d3c" }}
{{ $sidecar_port_for_internal := "8081" }}
{{ $sidecar_port_for_external := "8082" }}

{{ $env := .Env.ENV }}
{{ $sub_env_id := .Env.SUB_ENV_ID }}

{{ assert (ne .Env.IMAGE_TAG "") }}

{{ $no_sub_env_id_envs := slice "production" "staging" }}
{{ if has $no_sub_env_id_envs $env }}
  {{ assert (eq $env $sub_env_id) }}
{{ end }}

{{ $namespace := $env }}
{{ if ne $env $sub_env_id }}
  {{ $namespace = join (slice $env $sub_env_id) "-" }}
{{ end }}

{{ $graceful_shutdown_timeout_sec := "30" }}
{{ $sidecar_graceful_shutdown_timeout_sec := "31" }}
{{ $application_graceful_shutdown_timeout_sec := "36" }}
{{ $telegraf_graceful_shutdown_timeout_sec := "41" }}

{{ $sidecar_normalized_path_regexps := conv.Join (`
^/health$
` | strings.TrimSpace | strings.Split "\n") "," }}

# TODO: external exposoed path setting
{{ $sidecar_externally_exposed_path_regexps := conv.Join (`
^.*/v1/myapp/users/me$
` | strings.TrimSpace | strings.Split "\n") "," }}

{{ $ingress_host := "api.staging.banksalad.com" }}
{{ $cors_allow_origin := "*" }}
{{ $cors_allow_headers := conv.Join (`
DNT
X-CustomHeader
Keep-Alive
User-Agent
X-Requested-With
If-Modified-Since
Cache-Control
Content-Type
Authorization
Accept
Pragma
Banksalad-Device-Id
Banksalad-Request-Id
Banksalad-Session-Id
Banksalad-Application-Name
Banksalad-Application-Version
Banksalad-Release-Type
Banksalad-Build-Type
Banksalad-Api-Env
Banksalad-Caller
` | strings.TrimSpace | strings.Split "\n") "," }}
{{ if eq $env "production" }}
  {{ $ingress_host = "api.banksalad.com" }}
  {{ $cors_allow_origin = "https://*.banksalad.com" }}
{{ end }}

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $service_name }}-sidecar-telegraf
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
data:
  telegraf.conf: |
    [global_tags]

    [agent]
      interval = "10s"
      round_interval = false
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = "ns"
      hostname = ""
      omit_hostname = true

    [[outputs.influxdb]]
      urls = ["http://influxdb-service.{{ $namespace }}.banksalad.in:8086"]
      database = "observability-telegraf"

    [[inputs.statsd]]
      protocol = "udp"
      max_tcp_connections = 250
      tcp_keep_alive = false
      service_address = ":8125"
      delete_gauges = true
      delete_counters = true
      delete_sets = true
      delete_timings = true
      percentiles = [99, 95, 90, 50]
      metric_separator = "."
      parse_data_dog_tags = false
      datadog_extensions = false
      allowed_pending_messages = 10000
      percentile_limit = 1000

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
  annotations:
    "sidecar.jaegertracing.io/inject": "true"
spec:
  selector:
    matchLabels:
      app: {{ $service_name }}
  template:
    metadata:
      name: {{ $service_name }}
      labels:
        app: {{ $service_name }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ $service_name }}
            topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: {{ $service_name }}
      volumes:
        - name: telegraf-conf
          configMap:
            name: {{ $service_name }}-sidecar-telegraf
            defaultMode: 420
      containers:
        - name: telegraf
          image: telegraf:{{ $telegraf_tag }}
          ports:
            - containerPort: 8125
              protocol: UDP
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: telegraf-conf
              mountPath: "/etc/telegraf"
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - "-c"
                  - sleep {{ $telegraf_graceful_shutdown_timeout_sec }}
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: sidecar-for-internal
          image: 649962636948.dkr.ecr.ap-northeast-2.amazonaws.com/sidecar:{{ $sidecar_tag }}
          ports:
            - containerPort: {{ $sidecar_port_for_internal }}
              protocol: TCP
          env:
            - name: SIDECAR_HTTP_PORT
              value: "{{ $sidecar_port_for_internal }}"
            - name: SERVICE_HTTP_HOSTNAME
              value: localhost
            - name: SERVICE_HTTP_PORT
              value: "{{ $service_http_port }}"
            - name: SERVICE_NAME
              value: {{ $service_name }}
            - name: SIDECAR_GRACEFUL_SHUTDOWN_TIMEOUT_MS
              value: "{{ mul $sidecar_graceful_shutdown_timeout_sec 1000 }}"
            - name: ENV
              value: {{ $env }}
            - name: SUB_ENV_ID
              value: {{ $sub_env_id }}
            - name: NAMESPACE
              value: {{ $namespace }}
            - name: IS_SERVICE_HTTP2
              value: "false"
            - name: PATH_REGEXPS
              value: "{{ $sidecar_normalized_path_regexps }}"
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: sidecar-for-external
          image: 649962636948.dkr.ecr.ap-northeast-2.amazonaws.com/sidecar:{{ $sidecar_tag }}
          ports:
            - containerPort: {{ $sidecar_port_for_external }}
              protocol: TCP
          env:
            - name: SIDECAR_HTTP_PORT
              value: "{{ $sidecar_port_for_external }}"
            - name: SERVICE_HTTP_HOSTNAME
              value: localhost
            - name: SERVICE_HTTP_PORT
              value: "{{ $service_http_port }}"
            - name: SERVICE_NAME
              value: {{ $service_name }}
            - name: SIDECAR_GRACEFUL_SHUTDOWN_TIMEOUT_MS
              value: "{{ mul $sidecar_graceful_shutdown_timeout_sec 1000 }}"
            - name: ENV
              value: {{ $env }}
            - name: SUB_ENV_ID
              value: {{ $sub_env_id }}
            - name: NAMESPACE
              value: {{ $namespace }}
            - name: IS_SERVICE_HTTP2
              value: "false"
            - name: PATH_REGEXPS
              value: "{{ $sidecar_externally_exposed_path_regexps }}"
            - name: IS_FOR_EXTERNAL
              value: "true"
            - name: EXTERNALLY_EXPOSED_PATH_REGEXPS
              value: {{ $sidecar_externally_exposed_path_regexps }}
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: {{ $service_name }}
          image: 649962636948.dkr.ecr.ap-northeast-2.amazonaws.com/{{ $service_name }}:{{ getenv "IMAGE_TAG" }}
          ports:
            - containerPort: {{ $service_grpc_port }}
              protocol: TCP
            - containerPort: {{ $service_http_port }}
              protocol: TCP
          env:
            - name: ENV
              value: {{ $env }}
            - name: SUB_ENV_ID
              value: {{ $sub_env_id }}
            - name: NAMESPACE
              value: {{ $namespace }}
            - name: GRACEFUL_SHUTDOWN_TIMEOUT_MS
              value: "{{ mul $application_graceful_shutdown_timeout_sec 1000 }}"
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: "/health"
              port: {{ $service_http_port }}
              scheme: HTTP
            initialDelaySeconds: {{ $application_graceful_shutdown_timeout_sec }}
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/health"
              port: {{ $service_http_port }}
              scheme: HTTP
            initialDelaySeconds: {{ $application_graceful_shutdown_timeout_sec }}
            timeoutSeconds: 1
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
      restartPolicy: Always
      terminationGracePeriodSeconds: {{ mul $graceful_shutdown_timeout_sec 2 }}
      dnsPolicy: ClusterFirst
      securityContext: {}
      imagePullSecrets:
        - name: docker-hub-registry-credential
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600

---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  scaleTargetRef:
    kind: Deployment
    name: {{ $service_name }}
    apiVersion: apps/v1
{{ if eq $env "production" }}
  minReplicas: 3
  maxReplicas: 5
{{ else }}
  minReplicas: 1
  maxReplicas: 1
{{ end }}
  targetCPUUtilizationPercentage: 60

---
kind: Service
apiVersion: v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  ports:
    - name: http-for-internal
      protocol: TCP
      port: 80
      targetPort: {{ $sidecar_port_for_internal }}
    - name: http-for-external
      protocol: TCP
      port: 81
      targetPort: {{ $sidecar_port_for_external }}
    - name: grpc
      protocol: TCP
      port: 8080
      targetPort: {{ $service_grpc_port }}
  selector:
    app: {{ $service_name }}
  type: ClusterIP
  sessionAffinity: None

---
kind: Service
apiVersion: v1
metadata:
  name: {{ $service_name }}-headless
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  ports:
    - name: grpc
      protocol: TCP
      port: 8080
      targetPort: {{ $service_grpc_port }}
  selector:
    app: {{ $service_name }}
  clusterIP: None
  sessionAffinity: None

# TODO: network policy setting
# https://docs.google.com/document/d/1jOMnmdVR8TXTCJel2kdjHJzXVj46IMSVAkH_8_ixCfM/edit#heading=h.5zuvv9v3l50u
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  podSelector:
    matchLabels:
      app: {{ $service_name }}
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: auth
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 18081

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
  annotations:
    kubernetes.io/ingress.class: nginx
    ingress.kubernetes.io/service-upstream: "true"
    ingress.kubernetes.io/enable-cors: "true"
    ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    ingress.kubernetes.io/cors-allow-origin: "{{ $cors_allow_origin }}"
    ingress.kubernetes.io/cors-allow-headers: "{{ $cors_allow_headers }}"
spec:
  rules:
    - host: {{ $ingress_host }}
      http:
        paths:
          - path: "/v1/myapp/"
            pathType: Prefix
            backend:
              service:
                name: {{ $service_name }}
                port:
                  number: 81

---
kind: PodDisruptionBudget
apiVersion: policy/v1beta1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ $service_name }}
